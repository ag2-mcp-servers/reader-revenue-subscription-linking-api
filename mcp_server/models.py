# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:40:44+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class DeleteReaderResponse(BaseModel):
    pass


class Entitlement(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='The detail field can carry a description of the SKU that corresponds to what the user has been granted access to. This description, which is opaque to Google, can be displayed in the Google user subscription console for users who linked the subscription to a Google Account. Max 80 character limit.',
    )
    expireTime: Optional[str] = Field(
        None,
        description='Required. Expiration time of the entitlement. Entitlements that have expired over 30 days will be purged. Required. LINT.IfChange(expire_time) The max expire_time is 398 days from now(). LINT.ThenChange(//depot/google3/java/com/google/subscribewithgoogle/accountlinking/subscriptionlink/service/config/protoconf.pi:max_expiry_age)',
    )
    productId: Optional[str] = Field(
        None,
        description='Required. The publication\'s product ID that the user has access to. This is the same product ID as can be found in Schema.org markup (http://schema.org/productID). E.g. "dailybugle.com:basic"',
    )
    subscriptionToken: Optional[str] = Field(
        None,
        description='A source-specific subscription token. This is an opaque string that the publisher provides to Google. This token is opaque and has no meaning to Google.',
    )


class Reader(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. Time the publication reader was created and associated with a Google user.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the reader. The last part of ppid in the resource name is the publisher provided id.',
    )


class ReaderEntitlements(BaseModel):
    entitlements: Optional[List[Entitlement]] = Field(
        None, description='All of the entitlements for a publication reader.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The resource name of the singleton.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'
